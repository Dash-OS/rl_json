if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

package require rl_json

test foreach-1.1 {Single iterator, single var, over array} -setup { #<<<
	set i	0
	set res	{}
} -body {
	json foreach elem {["a", "b", "other var", null, true, false, {"x": 42}]} {
		lappend res	"[incr i]($elem)([json get $elem])"
	}
	set res
} -cleanup {
	unset -nocomplain i res
} -result [list \
	"1(\"a\")(a)" \
	"2(\"b\")(b)" \
	"3(\"other var\")(other var)" \
	"4(null)()" \
	"5(true)(1)" \
	"6(false)(0)" \
	"7({\"x\":42})(x 42)" \
]
#>>>
test foreach-2.1 {Single iterator, multi vars, over array} -setup { #<<<
	set i	0
	set res	{}
} -body {
	json foreach {x y} {["a", "b", "other var", null, true, false, {"x": 42}, 42.1, "last"]} {
		lappend res [string cat [incr i] \
			($x)([json get $x]) \
			($y)([json get $y])]
	}
	set res
} -cleanup {
	unset -nocomplain i res
} -result [list \
	"1(\"a\")(a)(\"b\")(b)" \
	"2(\"other var\")(other var)(null)()" \
	"3(true)(1)(false)(0)" \
	"4({\"x\":42})(x 42)(42.1)(42.1)" \
	"5(\"last\")(last)(null)()" \
]
#>>>
test foreach-3.1 {Multiple iterators, single var, over array} -setup { #<<<
	set i	0
	set res	{}
} -body {
	json foreach \
		elem  {["a", "b", "other var", null, true, false, {"x": 42}]} \
		elem2 {["A", "B", "OTHER VAR", null, true, {"X": 42}]} \
	{
		lappend res	[string cat [incr i]($elem)([json get $elem])/($elem2)([json get $elem2])]
	}
	set res
} -cleanup {
	unset -nocomplain i res
} -result [list \
	1("a")(a)/("A")(A) \
	2("b")(b)/("B")(B) \
	{3("other var")(other var)/("OTHER VAR")(OTHER VAR)} \
	4(null)()/(null)() \
	5(true)(1)/(true)(1) \
	"6(false)(0)/({\"X\":42})(X 42)" \
	"7({\"x\":42})(x 42)/(null)()" \
]
#>>>
test foreach-4.1 {Multiple iterators, multi vars, over array} -setup { #<<<
	set i	0
	set res	{}
} -body {
	json foreach \
		{x y} {["a", "b", "other var", null, true, false, {"x": 42}, 42.1]} \
		{a b} {["A", "B", "OTHER VAR", null, true, {"X": 42}, 42.1]} \
	{
		lappend res [string cat [incr i] \
			($x)([json get $x]) \
			($y)([json get $y]) \
			/ \
			($a)([json get $a]) \
			($b)([json get $b])]
	}
	set res
} -cleanup {
	unset -nocomplain i res
} -result [list \
	"1(\"a\")(a)(\"b\")(b)/(\"A\")(A)(\"B\")(B)" \
	"2(\"other var\")(other var)(null)()/(\"OTHER VAR\")(OTHER VAR)(null)()" \
	"3(true)(1)(false)(0)/(true)(1)({\"X\":42})(X 42)" \
	"4({\"x\":42})(x 42)(42.1)(42.1)/(42.1)(42.1)(null)()" \
]
#>>>
test foreach-5.1 {Single iterator, single var, over array, continue} -setup { #<<<
	set i	0
	set res	{}
} -body {
	json foreach elem {["a", "b", "other var", null, true, false, {"x": 42}]} {
		if {[json get $elem] eq ""} continue
		lappend res	"[incr i]($elem)([json get $elem])"
	}
	set res
} -cleanup {
	unset -nocomplain i res
} -result [list \
	"1(\"a\")(a)" \
	"2(\"b\")(b)" \
	"3(\"other var\")(other var)" \
	"4(true)(1)" \
	"5(false)(0)" \
	"6({\"x\":42})(x 42)" \
]
#>>>
test foreach-6.1 {Single iterator, single var, over array, break} -setup { #<<<
	set i	0
	set res	{}
} -body {
	json foreach elem {["a", "b", "other var", null, true, false, {"x": 42}]} {
		if {[json get $elem] eq ""} break
		lappend res	"[incr i]($elem)([json get $elem])"
	}
	set res
} -cleanup {
	unset -nocomplain i res
} -result [list \
	"1(\"a\")(a)" \
	"2(\"b\")(b)" \
	"3(\"other var\")(other var)" \
]
#>>>

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
