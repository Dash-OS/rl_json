if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

package require rl_json

proc intersect3 {list1 list2} { #<<<
	set firstonly       {}
	set intersection    {}
	set secondonly      {}

	set list1	[lsort -unique $list1]
	set list2	[lsort -unique $list2]

	foreach item $list1 {
		if {[lsearch -sorted $list2 $item] == -1} {
			lappend firstonly $item
		} else {
			lappend intersection $item
		}
	}

	foreach item $list2 {
		if {[lsearch -sorted $intersection $item] == -1} {
			lappend secondonly $item
		}
	}

	list $firstonly $intersection $secondonly
}

#>>>

# Compare two json docs, ignoring non-semantic elements (optional whitespace,
# object key ordering, etc)
proc compare {j1 j2} { #<<<
	if {[json get $j1 ?type] ne [json get $j2 ?type]} {
		return 0
	}

	switch -- [json get $j1 ?type] {
		object {
			# Two JSON objects are considered to match if they have the same
			# keys (regardless of order), and the values stored in those keys
			# match according to this function
			if {[json get $j1 ?size] != [json get $j2 ?size]} {
				return 0
			}

			lassign [intersect3 [json get $j1 ?keys] [json get $j2 ?keys]] \
				j1_only both j2_only

			if {[llength $j1_only] > 0 || [llength $j2_only] > 0} {
				return 0
			}

			foreach key $both {
				if {![compare [json extract $j1 $key] [json extract $j2 $key]]} {
					return 0
				}
			}

			return 1
		}

		array {
			# Two JSON arrays are considered to match if they have the same
			# number of elements, and each element (in order) is considered to
			# match by this function
			if {[json get $j1 ?length] != [json get $j2 ?length]} {
				return 0
			}
			json foreach e1 $j1 e2 $j2 {
				if {![compare $e1 $e2]} {
					return 0
				}
			}
			return 1
		}

		string    { expr {[json get $j1] eq [json get $j2]} }
		number    { expr {[json get $j1] == [json get $j2]} }
		boolean   { expr {[json get $j1] == [json get $j2]} }
		null      { return 1 }

		default {
			error "Unsupported JSON type for compare: \"[json get $j1 ?type]\""
		}
	}
}

#>>>

test merge-1.1 {Update a key in an object} -body { #<<<
	compare [json merge {
		{
			"foo": "Foo",
			"baz": "Baz"
		}
	} {
		{
			"bar": "Bar"
		}
	}] {
		{
			"foo": "Foo",
			"bar": "Bar",
			"baz": "Baz"
		}
	}
} -result 1
#>>>
test merge-1.2 {Replace a string with an object} -body { #<<<
	compare [json merge {"foo"} {
		{ "bar": "Bar" }
	}] {
		{ "bar": "Bar" }
	}
} -result 1
#>>>
test merge-1.3 {Replace a number with an object} -body { #<<<
	compare [json merge {1234} {
		{ "bar": "Bar" }
	}] {
		{ "bar": "Bar" }
	}
} -result 1
#>>>
test merge-1.4 {Replace a boolean with an object} -body { #<<<
	compare [json merge {true} {
		{ "bar": "Bar" }
	}] {
		{ "bar": "Bar" }
	}
} -result 1
#>>>
test merge-1.5 {Replace a null with an object} -body { #<<<
	compare [json merge {null} {
		{ "bar": "Bar" }
	}] {
		{ "bar": "Bar" }
	}
} -result 1
#>>>
test merge-1.6 {Replace an array with an object} -body { #<<<
	compare [json merge {[1, 2]} {
		{ "bar": "Bar" }
	}] {
		{ "bar": "Bar" }
	}
} -result 1
#>>>
test merge-2.1 {Deep merge} -body { #<<<
	compare [json merge -deep -- {
		{
			"query": {
				"filter": {
					"filtered": {
						"bool": {
							"must": [
								{ "term": {"nickname": "tolw"} },
								{ "exists": {"field": "fkey.sugar_accounts"} }
							],
							"should": [
								{ "term": {"status": "active"} }
							]
						}
					}
				}
			},
			"size": 1000
		}
	} {
		{
			"query": {
				"filter": {
					"filtered": {
						"bool": {
							"must": [
								{ "term": {"nickname": "tolw"} }
							],
							"must_not": [
								{ "exists": {"field": "fkey.sugar_accounts"} }
							]
						}
					}
				}
			},
			"_type": "shop"
		}
	}] {
		{
			"query": {
				"filter": {
					"filtered": {
						"bool": {
							"must": [
								{ "term": {"nickname": "tolw"} }
							],
							"should": [
								{ "term": {"status": "active"} }
							],
							"must_not": [
								{ "exists": {"field": "fkey.sugar_accounts"} }
							]
						}
					}
				}
			},
			"size": 1000,
			"_type": "shop"
		}
	}
} -result 1
#>>>
test merge-10.1 {No args test} -body { #<<<
	json merge
} -result {}
#>>>

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
